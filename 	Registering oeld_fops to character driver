static int __init oeld_init(void)
{
        int status;

        /* Claim our 256 reserved device numbers.  Then register a class
         * that will key udev/mdev to add/remove /dev nodes.  Last, register
         * the driver which manages those device numbers.
         */
        printk("=1=oeld_init\n");
        BUILD_BUG_ON(N_SPI_MINORS > 256);
        printk("=2=oeld_init\n");
        status = register_chrdev(oeld_MAJOR, "spi", &oeld_fops);
        if (status < 0)' h, e  X5 S& S9 ^6 U. k6 G4 ]
                return status;
        printk("=3=oeld_init\n");
#ifdef CONFIG_COMPAT# X4 Q, O5 t9 B9 X9 N; 
        printk("=3=oeld_init CONFIG_COMPAT define\n");
#endif
        oeld_class = class_create(THIS_MODULE, "oeld");
        if (IS_ERR(oeld_class)) {
                unregister_chrdev(oeld_MAJOR, oeld_spi_driver.driver.name);
                return PTR_ERR(oeld_class);
        }
        printk("=4=oeld_init\n");

        status = spi_register_driver(&oeld_spi_driver);
        if (status < 0) {
                class_destroy(oeld_class);
                unregister_chrdev(oeld_MAJOR, oeld_spi_driver.driver.name);
        }
        printk("=5=oeld_init\n");
        return status;
}
module_init(oeld_init);
