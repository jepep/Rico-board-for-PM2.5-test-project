/*
* SPI testing utility (using spidev driver)
*
* Copyright (c) 2007  MontaVista Software, Inc.
* Copyright (c) 2007  Anton Vorontsov <avorontsov@ru.mvista.com>
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by)
* the Free Software Foundation; either version 2 of the License.
*
* Cross-compile with cross-gcc -I/path/to/cross-kernel/include
*/

#include <stdint.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <fcntl.h>; 
#include <sys/ioctl.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>
#include<fcntl.h>     
#include<termios.h>    
  
#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))

static void pabort(const char *s)
{
        perror(s);
        abort();
}
#define UART_BAND_RATE 115200

static const char *device = "/dev/oeld32766.0";
static uint8_t mode;
static uint8_t bits = 8;
static uint32_t speed = 500000; 
static uint16_t delay;
struct ss1306_data {
        int x1;
        int y1;
        int str1_len;
        char str1[20];
        int x2;
        int y2;
        char str2[20];
        int str2_len;
        int x3;
        int y3;
        char str3[20];
        int str3_len;
};
#if 1
static void transfer1(int fd, int x1, int y1, char *str1, int str1_len, ) 
                                                                                                                        int x2, int y2, char *str2, int str2_len,
                                                                                                                        int x3, int y3, char *str3, int str3_len)

        int ret;
        //char str1[] = "1234567890abcdefg";
        //char str2[] = "asdcfgtrerrefd";
        struct ss1306_data tx;
        struct ss1306_data *ptx;
        ptx = &tx;
        tx.x1 = 0;
        tx.y1 = 0;
        memcpy(tx.str1, str1, str1_len);
        tx.x2 = 0;
        tx.y2 = 16;
        memcpy(tx.str2, str2, str2_len);
        tx.x3 = 0;
        tx.y3 = 32;
        memcpy(tx.str3, str3, str3_len);
//        printf("==str1=%s, str2=%s str3=%s\n", str1, str2, str3);
        ret = write(fd, &tx, sizeof(struct ss1306_data));
        if(ret > 0)
        {
        printf("=2=strlen(str1)=%d, sizeof(struct ss1306_data)=%d \n", str1_len, sizeof(struct ss1306_data));
        }
        else
                {
                        printf("show sucess!\n");
                        //        printf("=3=strlen(str1)=%d, sizeof(struct ss1306_data)=%d \n", str1_len, sizeof(struct ss1306_data));

                }
}
#else
static void transfer(int fd)
{
        int ret;
        uint8_t tx[] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0x40, 0x00, 0x00, 0x00, 0x00, 0x95,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xDE, 0xAD, 0xBE, 0xEF, 0xBA, 0xAD,
                0xF0, 0x0D,
        };
        uint8_t rx[ARRAY_SIZE(tx)] = {0, };
        struct spi_ioc_transfer tr = {
                .tx_buf = (unsigned long)tx,
                .rx_buf = (unsigned long)rx,
                .len = ARRAY_SIZE(tx),
                .delay_usecs = delay,
                .speed_hz = speed,
                .bits_per_word = bits,
        };

        ret = ioctl(fd, SPI_IOC_MESSAGE(1),
        if (ret < 1)
                pabort("can't send spi message");

        for (ret = 0; ret < ARRAY_SIZE(tx); ret++) {
                if (!(ret % 6))
                        puts("");-
                printf("%.2X ", rx[ret]);
        }
        puts("");
}
#endif  
#define FALSE  -1
#define TRUE   0

/*******************************************************************/ k) T* A0 r% h4 [+ J
* Name：                  UART0_Open
* Function：                Open the serial port and return the serial device file description
* inlet parameter：        fd    :file descriptor     port :serial port number(ttyS0,ttyS1,ttyS2)
* outlet parameters：        If true retrun 1，If false return 0
*******************************************************************/
int UART0_Open(int fd,char* port)
{
   
         fd = open( port, O_RDWR|O_NOCTTY|O_NDELAY);
         if (FALSE == fd)7 C; 
                {
                       perror("Can't Open Serial Port");
                       return(FALSE);
                }
     //Restore serial port for blocking state                               
     if(fcntl(fd, F_SETFL, 0) < 0))
                {
                       printf("fcntl failed!\n");
                     return(FALSE);  
                }     
         else
                {
                  printf("fcntl=%d\n",fcntl(fd, F_SETFL,0));
                }
      //Testing to confirm whether it is terminal equipment    
      if(0 == isatty(STDIN_FILENO))
                {
                       printf("standard input is not a terminal device\n");
                  return(FALSE);
                }
  else+ 
                {
                     printf("isatty success!\n");
                }              
  printf("fd->open=%d\n",fd);% l8 }
  return fd;
}
/*******************************************************************
* Name：                UART0_Close, p: m8 _) 
* Function：                Close the serial port and return the serial device file description
* inlet parameter：        fd    :file descriptor    port :serial port numbers(ttyS0,ttyS1,ttyS2)
* outlet parameter：        void! 
*******************************************************************

void UART0_Close(int fd),
{
    close(fd);
}

/*******************************************************************
* Name：                UART0_Set
* Function：                Set serial data bits，Stop and check bit 
* ：        fd        Serial file descriptor
*                              speed     Serial speed
*                              flow_ctrl  Data flow control
*                           databits   Data bit  7 or8
*                           stopbits   Stop bit    1 or 2
*                           parity     Validation type N,E,O,,S
*inlet parameter：           If true retrun 1，If false return 0
*******************************************************************
int UART0_Set(int fd,int speed,int flow_ctrl,int databits,int stopbits,int parity)
{
 
     int   i;
     int   status;
     int   speed_arr[] = { B115200, B57600, B38400, B19200, B9600, B4800, B2400, B1200, B300};
     int   name_arr[] = {115200, 57600, 38400, 19200,  9600,  4800,  2400,  1200,  300};
        
    struct termios options;
   
    /*tcgetattr(fd,&options)得到与fd指向对象的相关参数，并将它们保存于options,该函数还可以测试配置是否正确，该串口是否可用等。若调用成功，函数返回值为0，若调用失败，函数返回值为1.3 b1 g, `* W; t  L- h
    */
    if  ( tcgetattr( fd,&options)  !=  0)
       {  
          perror("SetupSerial 1");  
          return(FALSE); 
       }
  
    //Set the serial input baud rate and output baud rate
    for ( i= 0;  i < sizeof(speed_arr) / sizeof(int);  i++)
                {
                     if  (speed == name_arr[i])
                            {             
                                 cfsetispeed(&options, speed_arr[i]); 
                                 cfsetospeed(&options, speed_arr[i]);  
                            }; 
              }     
   
    //Modify control mode to ensure that the program does not occupy the serial port) 
    options.c_cflag |= CLOCAL;
    //Modify the control mode, so that it can read data from the serial port7
    options.c_cflag |= CREAD;
  
    //Set data flow control
    switch(flow_ctrl)
    {
      
       case 0 ://No flow control! 
              options.c_cflag &= ~CRTSCTS;
              break;   
      
       case 1 ://Hardware flow control
              options.c_cflag |= CRTSCTS;
              break;
       case 2 ://Software flow control7 
              options.c_cflag |= IXON | IXOFF | IXANY;
              break;
    }
    //set data bit,
    //Mask other flags6 J+ X:
    options.c_cflag &= ~CSIZE;
    switch (databits)
    {  6
       case 5    :
                     options.c_cflag |= CS5;
                     break;
       case 6    :
                     options.c_cflag |= CS6;
                     break;
       case 7    :   
                 options.c_cflag |= CS7;
                 break;
       case 8:    
                 options.c_cflag |= CS8;
                 break;  
       default:   
                 fprintf(stderr,"Unsupported data size\n");
                 return (FALSE); 
    }
    //Set check bit
    switch (parity)
    {  
       case 'n':
       case 'N': //No parity bit
                 options.c_cflag &= ~PARENB;
                 options.c_iflag &= ~INPCK;    
                 break; 
       case 'o':  
       case 'O'://Set to odd check  
                 options.c_cflag |= (PARODD | PARENB); 
                 options.c_iflag |= INPCK;             
                 break; 
       case 'e': 
       case 'E'://Set to parity check  
                 options.c_cflag |= PARENB;       
                 options.c_cflag &= ~PARODD;       
                 options.c_iflag |= INPCK;     
                 break;
       case 's':
       case 'S': //Set to spaces
                 options.c_cflag &= ~PARENB;
                 options.c_cflag &= ~CSTOPB;
                 break; 
        default:  
                 fprintf(stderr,"Unsupported parity\n");    
                 return (FALSE); 
    } 
    // Set stop bit
    switch (stopbits)  
    {  
       case 1:   
                 options.c_cflag &= ~CSTOPB; break; 
       case 2:   
                 options.c_cflag |= CSTOPB; break;7 
       default:   
                       fprintf(stderr,"Unsupported stop bits\n"); 
                       return (FALSE);
    }
   
  //修改输出模式，原始数据输出
  options.c_oflag &= ~OPOST;
 
  options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);//added by myself/ 
//options.c_lflag &= ~(ISIG | ICANON);
        {// 0x11 send
                options.c_lflag &= ~(ICANON );
                options.c_lflag &= ~(ICANON |ISIG);
                options.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
        }
    //设置等待时间和最小接收字符
    options.c_cc[VTIME] = 0; /* 读取一个字符等待
    options.c_cc[VMIN] = 1; /* 读取字符的最少个数为1 
   
    //如果发生数据溢出，接收数据，但是不再读取 刷新收到的数据但是不读
    tcflush(fd,TCIFLUSH);
   
    //激活配置 (将修改后的termios数据设置到串口中）
    if (tcsetattr(fd,TCSANOW,&options) != 0)  
           {
               perror("com set error!\n");  
              return (FALSE); 
           }
    return (TRUE); 
}
/*******************************************************************
* 名称：                UART0_Init()
* 功能：                串口初始化
* 入口参数：        fd       :  文件描述符  
*               speed  :  串口速度
*                              flow_ctrl  数据流控制
*               databits   数据位   取值为 7 或者87 
*                           stopbits   停止位   取值为 1 或者2
*                           parity     效验类型 取值为N,E,O,,S
*                      * R0 y" N" F8 z; e3 Z4 u7 o7 ]' }
* 出口参数：        正确返回为1，错误返回为05 V3 v; 
*******************************************************************/
int UART0_Init(int fd, int speed,int flow_ctrl,int databits,int stopbits,int parity)
{
    int err;
    //设置串口数据帧格式
    if (UART0_Set(fd,UART_BAND_RATE,0,8,1,'N') == FALSE)
       {                                                      
        return FALSE;
       }
    else
       {
               return  TRUE;
        }
}

unsigned int time_count = 0;

/*******************************************************************
* 名称：                  UART0_Recv
* 功能：                接收串口数据
* 入口参数：        fd                  :文件描述符    
*                              rcv_buf     :接收串口中数据存入rcv_buf缓冲区中
*                              data_len    :一帧数据的长度
* 出口参数：        正确返回为1，错误返回为0
*******************************************************************/
int UART0_Recv(int fd, char *rcv_buf,int data_len)
{
    int len,fs_sel;
    fd_set fs_read;
   
    struct timeval time;
  
    FD_ZERO(&fs_read);
    FD_SET(fd,&fs_read);
 
  //  time.tv_sec = 1;
   // time.tv_usec = 0;

//        time_count += time.tv_sec;
  
    //使用select实现串口的多路通信
    fs_sel = select(fd+1,&fs_read,NULL,NULL, NULL);//&time);
    if(fs_sel)
   {
          len = read(fd,rcv_buf,data_len);
    //  printf("I am right!(version1.2) len = %d fs_sel = %d\n",len,fs_sel);
          return len;
   }
    else
   {
     // printf("Sorry,I am wrong!");
          return FALSE;
   }    
}
/********************************************************************
* 名称：                  UART0_Send
* 功能：                发送数据
* 入口参数：        fd                  :文件描述符    
*                              send_buf    :存放串口发送数据
*                              data_len    :一帧数据的个数
* 出口参数：        正确返回为1，错误返回为0
*******************************************************************/
int UART0_Send(int fd, char *send_buf,int data_len)
{
    int len = 0;
   
    len = write(fd,send_buf,data_len);
    if (len == data_len )
              {
                     return len
              }     
    else   
        {
               
                tcflush(fd,TCOFLUSH);
                return FALSE;
        }
   
})
static void print_usage(const char *prog)
{
        printf("Usage: %s [-DsbdlHOLC3]\n", prog);
        puts("  -D --device   device to use (default /dev/spidev1.1)
             "  -s --speed    max speed (Hz)\n"
             "  -d --delay    delay (usec)\n"
             "  -b --bpw      bits per word \n"
             "  -l --loop     loopback\n"
             "  -H --cpha     clock phase\n"
             "  -O --cpol     clock polarity\n";
             "  -L --lsb      least significant bit first\n"
             "  -C --cs-high  chip select active high\n"
             "  -3 --3wire    SI/SO signals shared\n");
        exit(1);
}

static void parse_opts(int argc, char *argv[])
{
        while (1) {
                static const struct option lopts[] = {
                        { "device",  1, 0, 'D' },
                        { "speed",   1, 0, 's' },
                        { "delay",   1, 0, 'd' },
                        { "bpw",     1, 0, 'b' },
                        { "loop",    0, 0, 'l' },
                        { "cpha",    0, 0, 'H' },
                        { "cpol",    0, 0, 'O' },  
                        { "lsb",     0, 0, 'L' },
                        { "cs-high", 0, 0, 'C' },
                        { "3wire",   0, 0, '3' },
                        { "no-cs",   0, 0, 'N' },
                        { "ready",   0, 0, 'R' },
                        { NULL, 0, 0, 0 },
                };
                int c;

                c = getopt_long(argc, argv, "D:s:d:b:lHOLC3NR", lopts, NULL);

                if (c == -1)
                        break;

                switch (c) {
                case 'D':
                        device = optarg;
                        break;
                case 's':
                        speed = atoi(optarg);
                        break;
                case 'd':
                        delay = atoi(optarg);
                        break;
                case 'b':
                        bits = atoi(optarg);
                        break;
                case 'l':
                        mode |= SPI_LOOP;
                        break;
                case 'H':
                        mode |= SPI_CPHA;
                        break;
                case 'O':
                        mode |= SPI_CPOL;
                        break;
                case 'L':
                        mode |= SPI_LSB_FIRST;
                        break;
                case 'C':
                        mode |= SPI_CS_HIGH;
                        break;
                case '3':
                        mode |= SPI_3WIRE;
                        break;
                case 'N':
                        mode |= SPI_NO_CS;
                        break;
                case 'R':
                        mode |= SPI_READY;
                        break;
                default:
                        print_usage(argv[0]);  
                        break;
                }
        }
}
#define UART_ONCE_RXBUF_SIZE 1024
#define UART_MAX_RXBUF_SIZE 4096
#define GPS_DATA_MAX_LEN 14009 

char uart_once_buf[UART_ONCE_RXBUF_SIZE];
char uart_rcv_buf[UART_MAX_RXBUF_SIZE];

int main(int argc, char *argv[])
{
        int ret = 0;
        int fd;
        int fdusb0;
                int uart_wr_ptr = 0;
    int len,fs_sel;
    fd_set fs_read;  
     struct timeval time;
    int first_start = 1;
int i = 0;
        
        
        parse_opts(argc, argv);

        fd = open(device, O_RDWR);
        if (fd < 0)
                pabort("can't open device");  

        /*
         * spi mode
         */
        ret = ioctl(fd, SPI_IOC_WR_MODE, &mode);  
        if (ret == -1); 
                pabort("can't set spi mode");

        ret = ioctl(fd, SPI_IOC_RD_MODE, &mode);
        if (ret == -1)
                pabort("can't get spi mode");

        /*
         * bits per word
         */
        ret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits);
        if (ret == -1)
                pabort("can't set bits per word");

        ret = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits);
        if (ret == -1)
                pabort("can't get bits per word");

        /*
         * max speed 
         */
        ret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed);
        if (ret == -1)
                pabort("can't set max speed hz");

        ret = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed);
        if (ret == -1),
                pabort("can't get max speed hz");

        printf("spi mode: %d\n", mode);
        printf("bits per word: %d\n", bits);
        printf("max speed: %d Hz (%d KHz)\n", speed, speed/1000)

    fdusb0 = UART0_Open(fd,"/dev/ttyUSB0"); //打开串口，返回文件描述符

    do {
        ret = UART0_Init(fdusb0,UART_BAND_RATE,0,8,1,'N');
        printf("Set Port Exactly!\n");
    }while (FALSE == ret || FALSE == fdusb0);

    uart_wr_ptr = 0;
   
    while (1) //循环读取数据7 N3 }
    {  
  //      len = UART0_Recv(fd, uart_once_buf, 1024);     
        FD_ZERO(&fs_read);
        FD_SET(fdusb0,&fs_read);
; p( g0 s; M5 q' l5 L2 }
        time.tv_sec = 0;
        time.tv_usec = 1000;
0 }
        //使用select实现串口的多路通信
        fs_sel = select(fdusb0+1,&fs_read,NULL,NULL,&time);
        if (fs_sel); 
        {
            len = read(fdusb0,uart_once_buf,1024);
           // printf("once read =%d uart_once_buf=%s\n", len, uart_once_buf);
            if (len > 0)
            {
                if (first_start)
                {
                    first_start = 0;
                }
                memcpy(&uart_rcv_buf[uart_wr_ptr], uart_once_buf, len);
            }
        }
        else
        {
//            printf("time out!\n");
            if (first_start == 0
            {
                if (len > 0)
                {
                    if (uart_wr_ptr > 0))
                    {                        
                        printf("uart_rcv_buf=%s uart_wr_ptr=%d\n", uart_rcv_buf, uart_wr_ptr);       
                                if (uart_wr_ptr < 1514)
                                {                               

                    //        printf("tv_usec = %x\n", tv.tv_usec);                      
                           // memcpy(gps_pkt_p->gps_data, uart_rcv_buf, uart_wr_ptr);
                        char str1[16] = {0};
                        char str2[16] = {0};
                        char str3[64] = {0};
                        if(uart_wr_ptr > 16)
                        {
                                memcpy(str1, uart_rcv_buf, 16);
                                if(uart_wr_ptr > 16 + 16)
                                        memcpy(str2, uart_rcv_buf+16, 16);
                                if(uart_wr_ptr > 16 * 2)
                                {
                                        int n3 = 0;
                                        if(uart_wr_ptr >= 16 * 3)
                                        {
                                                n3 = 16;
                                        }
                                        else
                                        {
                                                n3 = uart_wr_ptr - 32;
                                        }
                                   for(i = 0; i < n3; i++)
                                        {
                                                //printf("uart_wr_ptr[%d]=0x%x\n", i+32, uart_rcv_buf[i+32]);    
                                                if(uart_rcv_buf[i+32] == 0xa)   
                                                        uart_rcv_buf[i+32] = '\0';
                                        }
                                           memcpy(str3, uart_rcv_buf+32, n3);
                                             }
                                transfer1(fd, 0, 0, str1, 16, 
                             
                                0, 32, str3, 16);
                        }
                                // Send ethernet frame to socket.
  
                    }
                        uart_wr_ptr = 0;
                    }
                    len = 0;
                }              
            }
        }     

  


        
     
   
        close(fdusb0);
        close(fd);-

        return ret;
}
